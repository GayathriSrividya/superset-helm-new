postgres:
  adminUser: "postgres"
  adminPassword: "postgres"
  db_port: 5432
  superset:
    db_name: "superset"
    db_username: "superset"
    db_password: "superset"

replicaCount: 1
oauth_enabled: False

adminUser:
  username: admin
  firstname: Superset
  lastname: Admin
  email: admin@superset.com
  password: admin12345

oauth:
  enabled: false
  client_id: "client_id"
  client_secret: "client_secret"
  email_whitelist_regex: ""
  whitelist_domain: ""
  user_registration_role: "Gamma"

# serviceAccountName: superset
serviceAccount:
  # -- Create custom service account for Superset. If create: true and name is not provided, `superset.fullname` will be used.
  create: false
  annotations: {}

runAsUser: 1000

# -- Install additional packages and do any other bootstrap configuration in this script
# For production clusters it's recommended to build own image with this step done in CI
# @default -- see `values.yaml`
bootstrapScript: |
  #!/bin/bash
  rm -rf /var/lib/apt/lists/* && \
  pip install \
    psycopg2-binary==2.9.1 \
    redis==3.5.3 && \
  if [ ! -f ~/bootstrap ]; then echo "Running Superset with uid {{ .Values.runAsUser }}" > ~/bootstrap; fi

# -- The name of the secret which we will use to generate a superset_config.py file
# Note: this secret must have the key superset_config.py in it and can include other files as well
configFromSecret: '{{ template "superset.fullname" . }}-config'

# -- The name of the secret which we will use to populate env vars in deployed pods
# This can be useful for secret keys, etc.
envFromSecret: '{{ template "superset.fullname" . }}-env'
# -- This can be a list of templated strings
envFromSecrets: []

# -- Extra environment variables that will be passed into pods
extraEnv: {}

# -- Extra environment variables in RAW format that will be passed into pods
extraEnvRaw: []

# -- Extra environment variables to pass as secrets
extraSecretEnv: {}

# -- Extra files to mount on `/app/pythonpath`
extraConfigs: {}

# -- Extra files to mount on `/app/pythonpath` as secrets
extraSecrets: {}

extraVolumes: []

extraVolumeMounts: []

configOverrides:
  enable_feature_flags: |
    FEATURE_FLAGS = {
      "DASHBOARD_NATIVE_FILTERS": True,
      "DASHBOARD_CROSS_FILTERS": True,
      "DASHBOARD_NATIVE_FILTERS_SET": True,
      "ENABLE_TEMPLATE_PROCESSING": True
    }
  data_cache_config: |
    from superset.superset_typing import CacheConfig
    DATA_CACHE_CONFIG: CacheConfig = {
      'CACHE_TYPE': 'RedisCache',
      'CACHE_DEFAULT_TIMEOUT': 600,
      'CACHE_KEY_PREFIX': 'data_',
      'CACHE_REDIS_URL': 'redis://{{ template "superset.fullname" . }}-redis-headless.{{ .Release.Namespace }}.svc.cluster.local:6379/1'
    }
  filter_cache_config: |
    FILTER_STATE_CACHE_CONFIG: CacheConfig = {
      'CACHE_TYPE': 'RedisCache',
      'CACHE_DEFAULT_TIMEOUT': 600,
      'CACHE_KEY_PREFIX': 'filter_',
      'CACHE_REDIS_URL': 'redis://{{ template "superset.fullname" . }}-redis-headless.{{ .Release.Namespace }}.svc.cluster.local:6379/1',
      # should the timeout be reset when retrieving a cached value
      "REFRESH_TIMEOUT_ON_RETRIEVAL": True
    }
  explore_form_data_cache_config: |
    EXPLORE_FORM_DATA_CACHE_CONFIG: CacheConfig = {
        'CACHE_TYPE': 'RedisCache',
        'CACHE_DEFAULT_TIMEOUT': 600,
        'CACHE_KEY_PREFIX': 'explore_',
        'CACHE_REDIS_URL': 'redis://{{ template "superset.fullname" . }}-redis-headless.{{ .Release.Namespace }}.svc.cluster.local:6379/1',
        "REFRESH_TIMEOUT_ON_RETRIEVAL": True
    }
  sql_alchemy_config: |
    SQLALCHEMY_DATABASE_URI = 'postgresql://{{ tpl .Values.postgres.superset.db_username . }}:{{ tpl .Values.postgres.superset.db_password . }}@{{ template "superset.fullname" . }}-postgresql-hl.{{ .Release.Namespace }}.svc.cluster.local:5432/{{ tpl .Values.postgres.superset.db_name . }}'
    SQLALCHEMY_TRACK_MODIFICATIONS = True
    SECRET_KEY = 'thisISaSECRET_1234'

# -- Same as above but the values are files
configOverridesFiles: {}

configMountPath: "/app/pythonpath"

extraConfigMountPath: "/app/configs"

image:
  repository: apache/superset
  tag: latest
  pullPolicy: Always

imagePullSecrets: []

# initImage:
#   repository: jwilder/dockerize
#   tag: latest
#   pullPolicy: IfNotPresent

service:
  type: NodePort
  port: 8088
  annotations:
    {}
    # cloud.google.com/load-balancer-type: "Internal"
  loadBalancerIP: null

ingress:
  enabled: false
  # ingressClassName: nginx
  annotations:
    {}
    # kubernetes.io/tls-acme: "true"
    ## Extend timeout to allow long running queries.
    # nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
    # nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    # nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
  path: /
  pathType: ImplementationSpecific
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}

  # limits:
  #   cpu:
  #   memory:
  # requests:
  #   cpu:
  #   memory:

# -- Custom hostAliases for all superset pods
## https://kubernetes.io/docs/tasks/network/customize-hosts-file-for-pods/
hostAliases: []

# Superset node configuration
supersetNode:
  # -- Startup command
  # @default -- See `values.yaml`
  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; /usr/bin/run-server.sh"
  connections:
    # -- Change in case of bringing your own redis and then also set redis.enabled:false
    redis_host: '{{ template "superset.fullname" . }}-redis-headless'
    # redis_password: superset
    redis_port: "6379"
    # You need to change below configuration incase bringing own PostgresSQL instance and also set postgresql.enabled:false
    db_host: '{{ template "superset.fullname" . }}-postgresql'
    db_port: "5432"
    db_user: superset
    db_pass: superset
    db_name: superset
  env: {}
  # -- If true, forces deployment to reload on each upgrade
  forceReload: false
  # -- Init containers
  # @default -- a container waiting for postgres
  # initContainers:
  #   - name: wait-for-postgres
  #     image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
  #     imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
  #     envFrom:
  #       - secretRef:
  #           name: "{{ tpl .Values.envFromSecret . }}"
  #     command:
  #       - /bin/sh
  #       - -c
  #       - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s
  # -- Annotations to be added to supersetNode deployment
  deploymentAnnotations: {}
  # -- Annotations to be added to supersetNode pods
  podAnnotations: {}
  # -- Labels to be added to supersetNode pods
  podLabels: {}

  # -- Resource settings for the supersetNode pods - these settings overwrite might existing values from the global resources object defined above.
  resources:
    {}
    # limits:
    #  cpu:
    #  memory:
    # requests:
    #  cpu:
    #  memory:
  podSecurityContext: {}
  containerSecurityContext: {}
  strategy:
    {}
    # type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%

init:
  # Configure resources
  # Warning: fab command consumes a lot of ram and can
  # cause the process to be killed due to OOM if it exceeds limit
  # Make sure you are giving a strong password for the admin user creation( else make sure you are changing after setup)
  # Also change the admin email to your own custom email.
  resources:
    {}
    # limits:
    #   cpu:
    #   memory:
    # requests:
    #   cpu:
    #   memory:
  # -- Command
  # @default -- a `superset_init.sh` command
  command:
    - "/bin/sh"
    - "-c"
    - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; . {{ .Values.configMountPath }}/superset_init.sh"
  enabled: true
  loadExamples: false
  createAdmin: true
  # adminUser:
  #   username: admin
  #   firstname: Superset
  #   lastname: Admin
  #   email: admin@superset.com
  #   password: admin123
  # -- List of initContainers
  # @default -- a container waiting for postgres
  # initContainers:
  #   - name: wait-for-postgres
  #     image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
  #     imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
  #     envFrom:
  #       - secretRef:
  #           name: "{{ tpl .Values.envFromSecret . }}"
  #     command:
  #       - /bin/sh
  #       - -c
  #       - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -timeout 120s
  # -- A Superset init script
  # @default -- a script to create admin user and initailize roles
  initscript: |-
    #!/bin/sh
    set -eu
    echo "Upgrading DB schema..."
    superset db upgrade
    echo "Initializing roles..."
    superset init
    {{ if .Values.init.createAdmin }}
    echo "Creating admin user..."
    superset fab create-admin \
                    --username {{ .Values.adminUser.username }} \
                    --firstname {{ .Values.adminUser.firstname }} \
                    --lastname {{ .Values.adminUser.lastname }} \
                    --email {{ .Values.adminUser.email }} \
                    --password {{ .Values.adminUser.password }} \
                    || true
    {{- end }}
    {{ if .Values.init.loadExamples }}
    echo "Loading examples..."
    superset load_examples
    {{- end }}
    if [ -f "{{ .Values.extraConfigMountPath }}/import_datasources.yaml" ]; then
      echo "Importing database connections.... "
      superset import_datasources -p {{ .Values.extraConfigMountPath }}/import_datasources.yaml
    fi
  ## Annotations to be added to init job pods
  podAnnotations: {}
  podSecurityContext: {}
  containerSecurityContext: {}
redis:
  ##
  ## Use the redis chart dependency.
  ##
  ## If you are bringing your own redis, you can set the host in supersetNode.connections.redis_host
  ##
  ## Set to false if bringing your own redis.
  enabled: true
  ##
  ## Set architecture to standalone/replication
  architecture: standalone
  ##
  ## Auth configuration:
  ##
  auth:
    ## Enable password authentication
    enabled: false
    ## The name of an existing secret that contains the redis password.
    existingSecret: ""
    ## Name of the key containing the secret.
    existingSecretKey: ""
    ## Redis password
    password: superset
  ##
  ## Master configuration
  ##
  master:
    ##
    ## Image configuration
    # image:
    ##
    ## docker registry secret names (list)
    # pullSecrets: nil
    ##
    ## Configure persistance
    persistence:
      ##
      ## Use a PVC to persist data.
      enabled: false
      ##
      ## Persistant class
      # storageClass: classname
      ##
      ## Access mode:
      accessModes:
        - ReadWriteOnce

# -- Configuration values for the postgresql dependency.
# ref: https://github.com/kubernetes/charts/blob/master/stable/postgresql/README.md
# @default -- see `values.yaml`
postgresql:
  ##
  ## Use the PostgreSQL chart dependency.
  ## Set to false if bringing your own PostgreSQL.
  enabled: true

  ## Authentication parameters
  auth:
    ## The name of an existing secret that contains the postgres password.
    # existingSecret:
    ## PostgreSQL name for a custom user to create
    username: superset
    ## PostgreSQL password for the custom user to create. Ignored if `auth.existingSecret` with key `password` is provided
    password: superset
    ## PostgreSQL name for a custom database to create
    database: superset

  image:
    tag: "14.6.0-debian-11-r13"

  ## PostgreSQL Primary parameters
  primary:
    ##
    ## Persistent Volume Storage configuration.
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes
    persistence:
      ##
      ## Enable PostgreSQL persistence using Persistent Volume Claims.
      enabled: true
      ##
      ## Persistant class
      # storageClass: classname
      ##
      ## Access modes:
      accessModes:
        - ReadWriteOnce
    ## PostgreSQL port
    service:
      ports:
        postgresql: "5432"
    
  ## Persistent Volume Storage configuration.
  ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes
  persistence:
    ##
    ## Enable PostgreSQL persistence using Persistent Volume Claims.
    enabled: false
    ##
    ## Persistant class
    # storageClass: classname
    ##
    ## Access modes:
    accessModes:
      - ReadWriteOnce

# -- Configuration values for the Redis dependency.
# ref: https://github.com/bitnami/charts/blob/master/bitnami/redis
# More documentation can be found here: https://artifacthub.io/packages/helm/bitnami/redis
# @default -- see `values.yaml`

nodeSelector: {}

tolerations: []

affinity: {}
